#The LINQ queries are executed in two different ways as follows.

Deferred execution
Immediate execution

LINQ operators are divided into 2 categories. They are as follows:

Deferred or Lazy Operators		: These query operators are used for deferred execution. For example – select, SelectMany, where, Take, Skip, etc. are belongs to Deferred or Lazy Operators category.
Immediate or Greedy Operators	: These query operators are used for immediate execution. For Example – count, average, min, max, First, Last, ToArray, ToList, etc. are belongs to the Immediate or Greedy Operators category.

#LINQ Deferred Execution:
	LINQ Query is not executed at the point of its declaration. That means, when we write a LINQ query, it doesn’t execute by itself. It executes only when we access the query results. So, here the execution of the query is deferred until the query variable is iterated over using for each loop.

#// In the below statement the LINQ Query is only defined and not executed
            IEnumerable<Employee> result = from emp in listEmployees
                                           where emp.Salary == 80000
                                           select emp;

#We will get the following advantages
	It avoids unnecessary query execution which improves the performance of the application.
	The Query creation and the Query execution are decoupled which provide us the flexibility to create the query in several steps.
	A Linq deferred execution query is always re-evaluated when we re-enumerate. As a result, we always get the updated data.

#Immediate Execution
	LINQ query is executed at the point of its declaration. So, it forces the query to execute and gets the result immediately. 

    // In the following statement, the LINQ Query is executed immediately as we are
    // Using the ToList() method which is a greedy operator which forces the query to be executed immediately
            IEnumerable<Employee> result = (from emp in listEmployees
                                           where emp.Salary == 80000
                                           select emp).ToList();

#Note: If you want to fetch the data from two data sources then you can use either the Method syntax or Query Syntax. But if you want to fetch the data from more than two data sources then it is easier to use the Query syntax rather than the Method syntax.

#Linq JOIN
     Linq Join you need to understand the following five things.

    Outer data source
    Inner data source
    Outer Key selector (common key in the outer data source)
    Inner Key selector (Common key in the inner data source)
    Result selector (project the data into a result set)

#Linq Group Join
    we can apply the Group Join on two or more data sources based on a common key (the key must exist in both the data sources) and then it produces the result set in the form of groups. In simple words, we can say that Linq Group Join is used to group the result sets based on a common key.
    Group Join we need to understand the following things.

        Outer Data Source
        Inner Data Source
        Outer Key Selector
        Inner Key Selector
        Result Selector



