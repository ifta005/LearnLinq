#The LINQ queries are executed in two different ways as follows.

Deferred execution
Immediate execution

LINQ operators are divided into 2 categories. They are as follows:

Deferred or Lazy Operators		: These query operators are used for deferred execution. For example – select, SelectMany, where, Take, Skip, etc. are belongs to Deferred or Lazy Operators category.
Immediate or Greedy Operators	: These query operators are used for immediate execution. For Example – count, average, min, max, First, Last, ToArray, ToList, etc. are belongs to the Immediate or Greedy Operators category.

#LINQ Deferred Execution:
	LINQ Query is not executed at the point of its declaration. That means, when we write a LINQ query, it doesn’t execute by itself. It executes only when we access the query results. So, here the execution of the query is deferred until the query variable is iterated over using for each loop.

#// In the below statement the LINQ Query is only defined and not executed
            IEnumerable<Employee> result = from emp in listEmployees
                                           where emp.Salary == 80000
                                           select emp;

#We will get the following advantages
	It avoids unnecessary query execution which improves the performance of the application.
	The Query creation and the Query execution are decoupled which provide us the flexibility to create the query in several steps.
	A Linq deferred execution query is always re-evaluated when we re-enumerate. As a result, we always get the updated data.

#Immediate Execution
	LINQ query is executed at the point of its declaration. So, it forces the query to execute and gets the result immediately. 

    // In the following statement, the LINQ Query is executed immediately as we are
    // Using the ToList() method which is a greedy operator which forces the query to be executed immediately
            IEnumerable<Employee> result = (from emp in listEmployees
                                           where emp.Salary == 80000
                                           select emp).ToList();

#Note: If you want to fetch the data from two data sources then you can use either the Method syntax or Query Syntax. But if you want to fetch the data from more than two data sources then it is easier to use the Query syntax rather than the Method syntax.

#Linq JOIN
     Linq Join you need to understand the following five things.

    Outer data source
    Inner data source
    Outer Key selector (common key in the outer data source)
    Inner Key selector (Common key in the inner data source)
    Result selector (project the data into a result set)

#Linq Group Join
    we can apply the Group Join on two or more data sources based on a common key (the key must exist in both the data sources) and then it produces the result set in the form of groups. In simple words, we can say that Linq Group Join is used to group the result sets based on a common key.
    Group Join we need to understand the following things.

        Outer Data Source
        Inner Data Source
        Outer Key Selector
        Inner Key Selector
        Result Selector

#Linq Cross Join
    When combining two data sources (or you can two collections) using Linq Cross Join, then each element in the first data source (i.e. first collection) will be mapped with each and every element in the second data source (i.e. second collection).

    In Cross Join we don’t require the common key or property as the “on” keyword which is used to specify the Join Key is not required. And moreover, there is no filtering of data. So, the total number of elements in the resultant sequence will be the product of the two data sources involved in the join. If the first data source contains 5 elements and the second data source contains 3 elements then the resultant sequence will contain (5*3) 15 elements.

#Element Operators in Linq
     Element Operators in Linq are used to return a single element from a data source using the element index or based on a predicate
     
     To perform the following operations, then you need to use the Element Operators.
        Select the First record from a data source.
        Fetch a specific record from the data source.
        Select the last record from a data source.
    The ElementAt operator is used to return an element from a specific index. If the data source is empty or if the provided index value is out of range, then we will get ArgumentOutOfRangeException.

#SequenceEqual
    Both the sequence contains the same data but here we are getting the output as False. This is because when comparing the complex types, the default comparer which is used by the SequenceEqual method will only check if the object references are equal or not.

#Partitioning Operations in Linq
    The Partitioning Operations in Linq are used to divide a sequence or you can say data source into two parts and then return one of them as output without changing the positions of the elements.
    We need to use Partitioning operators when we want to perform the following operations.

        When you want to select the top n number of records from a data source.
        If you want to select records from a data source until a specified condition is true.
        Select records from a data source except for the first n number of records.
        Skip records from a data source until a specified condition is true and then select all records.
        It can be used to implement pagination for a data source.

#TakeWhile Method
    TakeWhile Method in Linq is used to fetch all the elements from a data source or sequence until a specified condition is true. Once the condition is failed, then the TakeWhile method will not check the rest of the elements presents in the data source even though the condition is true for the remaining elements.

#Paging Using Skip and Take    
    Drawback:
        In a client-server architecture, the number of requests between the client and server is increased. In such cases, you may get the data at once and store it locally and then implement the paging at the client-side.

    Page Number = PN and Number Of Records Per Page = NRP, then you need to use the following formula:
    Result = DataSource.Skip((PN – 1) * NRP).Take(NRP)

#When to use Cast over OfType and vice versa?
        We need to use the Cast Operator

        When we want to cast all the elements in the collection
        When we know for sure the collection contains only elements of the specified type
        We need to use the OfType operator

        When we want to filter the elements and return only the specified type of elements.                                     

